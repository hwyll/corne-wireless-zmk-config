/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Custom layer definitions
#define BASE 0
#define NUMS 1
#define SYMS 2
#define NAVI 3
#define ADJS 4

/ {

    // Tap Dance
    behaviors {
        // comma, colon, semicolon
        tdcmclsc: tap_dance_cmclsc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp COMMA>, <&kp COLON>, <&kp SEMI>;
        };
        // single quote, double quote
        tdsqdq: tap_dance_sqdq {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp DQT>;
        };
        // period, dash
        tddtds: tap_dance_dtds {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp MINUS>;
        };
        // forward slash, backslash
        tdfsbs: tap_dance_fsbs {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp FSLH>, <&kp BSLH>;
        };
        // underscore, tilde, backslash
        tdutbs: tap_dance_utbs {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp UNDER>, <&kp TILDE>, <&kp BSLH>;
        };
        // double-tap LSHIFT to turn on CAPS WORD
        tdcaps: td_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    combos {
        compatible = "zmk,combos";
        // TAB+Q = ESC
        esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        // P+BACKSPACE = DEL
        pbksp_del {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp DEL>;
        };

        // QW = CTRL+W
        qw_ctrlw {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LC(W)>;
        };
        // QE = ALT+F4
        qe_altf4 {
            timeout-ms = <50>;
            key-positions = <1 3>;
            bindings = <&kp LA(F4)>;
        };

        // ZX = LEFTARROW
        zx_left {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LEFT>;
        };
        // CV = RIGHTARROW
        cv_right {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp RIGHT>;
        };

        // SDF = UPARROW
        sdf_up {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&kp UP>;
        };
        // XCV = DOWNARROW
        xcv_down {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp DOWN>;
        };


        // YU = {
        yu_lcb {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp LBRC>;
        };
        // IO = }
        io_rcb {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp RBRC>;
        };

        
        // HJ = [
        hj_lsb {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp LBKT>;
        };
        // KL = ]
        kl_rsb {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RBKT>;
        };

        // NM = (
        nm_lpar {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp LPAR>;
        };
        // ,. = )
        ,._rpar {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp RPAR>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // | `/ESC  |  Q  |  W  |  E  |  R  |  T  |    |  Y  |  U  |  I  |  O  |  P  | BKSP    |
            // |NAVI/TAB|  A  |  S  |  D  |  F  |  G  |    |  H  |  J  |  K  |  L  |  ;  |  '      |
            // |  LCTRL |  Z  |  X  |  C  |  V  |  B  |    |  N  |  M  |  ,  |  .  |  /  |  \      |
            //                | ALT | GUI | SHFT/SPC  |    | SYMS/ENT | NUMS/BKSP | ADJS/ALT |

            bindings = <
                &gresc        &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y  &kp U  &kp I          &kp O     &kp P     &kp BSPC
                &lt NAVI TAB  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H  &kp J  &kp K          &kp L     &kp SEMI  &kp SQT
                &kp LCTRL     &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N  &kp M  &kp COMMA      &kp DOT   &kp FSLH  &kp BSLH
                            &kp LALT  &kp LGUI  &mt LSHFT SPACE        &lt SYMS RET  &lt NUMS BSPC  &lt ADJS RALT
            >;
        };

        nums {
            // -----------------------------------------------------------------------------------------
            // |        |  !  |  @  |  #  |  $  |  %  |    |  ^  |  7  |  8  |  9  |  =  |     |
            // |   F1   | F2  | F3  | F4  | F5  | F6  |    |  .  |  4  |  5  |  6  |  -  |  +  |
            // |   F7   | F8  | F9  | F10 | F11 | F12 |    |  0  |  1  |  2  |  3  |  /  |  *  |
            //                      |     |     |     |    |     |     |     |
  
            bindings = <
                &trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT       &kp CARET  &kp N7  &kp N8  &kp N9  &kp EQUAL  &trans
                &kp F1  &kp F2    &kp F3  &kp F4    &kp F5    &kp F6          &kp DOT    &kp N4  &kp N5  &kp N6  &kp MINUS  &kp PLUS
                &kp F7  &kp F8    &kp F9  &kp F10   &kp F11   &kp F12         &kp N0     &kp N1  &kp N2  &kp N3  &kp FSLH   &kp STAR
                                          &trans    &trans    &trans          &trans     &kp N0  &trans
            >;
        };

        syms {
            // -----------------------------------------------------------------------------------------
            // |        |  !  |  @  |  #  |  $  |  %  |    |  ^  |  &  |  *  |  (  |  )  |      |
            // |        |     |     |     |     |     |    |     |  -  |  +  |  [  |  ]  |      |
            // |        |     |     |     |     |     |    |     |  _  |  =  |  {  |  }  |      |
            //                      |     |     |     |    |     |     |     |
 
            bindings = <
                &trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT        &kp CARET  &kp AMPS   &kp STAR   &kp LPAR  &kp RPAR  &trans
                &trans  &trans    &trans  &trans    &trans    &trans           &trans     &kp MINUS  &kp PLUS   &kp LBKT  &kp RBKT  &trans 
                &trans  &trans    &trans  &trans    &trans    &trans           &trans     &kp UNDER  &kp EQUAL  &kp LBRC  &kp RBRC  &trans
                                          &trans    &trans    &trans           &trans     &trans     &trans
            >;
        };

        navi {
            // -----------------------------------------------------------------------------------------
            // |        |     |     | UP  |     |     |    |     |     | UP  |     |     |      |
            // |        |     | LFT | DWN | RGT |     |    |     | LFT | DWN | RGT |     |      |
            // |        |     |     |     |     |     |    |     |     |     |     |     |      |
            //                      |     |     |     |    |     |     |     |

            bindings = <
                &trans  &trans  &trans    &kp UP    &trans     &trans      &trans  &trans  &trans    &kp UP    &trans     &trans
                &trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans      &trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
                &trans  &trans  &trans    &trans    &trans     &trans      &trans  &trans  &trans    &trans    &trans     &trans
                                               &trans  &trans  &trans      &trans  &trans    &trans
            >;
        };

        adjs {
            // -----------------------------------------------------------------------------------------
            // |        |     |     |     |     |     |    | BT1 | BT2 | BT3 | BT4 | BT5 | BT_CLR |
            // |        |     |     |     |     |     |    |  PP |VOLUP|VOLDN|MUTE |     |        |      
            // |        |     |     |     |     |     |    |     |     |     |     |     |        |
            //                      |     |     |     |    |     |     |     |

            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans        &kp BT_SEL 0  &kp BT_SEL 1  &kp BT_SEL 2  &kp BT_SEL 3  &kp BT_SEL 4  &kp BT_CLR
                &trans  &trans  &trans  &trans  &trans  &trans        &kp K_PP      &kp K_VOL_UP  &kp C_VOL_DN  &kp K_MUTE    &trans        &trans
                &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans        &trans        &trans
                                        &trans  &trans  &trans        &trans  &trans  &trans
            >;
        };
    };
};
